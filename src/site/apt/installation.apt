 ------
 Gene Expression Atlas
 ------
 Tony Burdett
 ------
 16/11/2009
 ------

Installation Instructions for the Gene Expression Atlas

 Before installing the Atlas, there are several required dependencies you need to install.

* GXA Dependencies

** Atlas 2 Oracle Database

 Firstly, you need a local installation of a database, in the Atlas 2 schema, that can be used as a store for Atlas data
 and is used to generate SOLR indexes and NetCDF views over the data.  Any data you load into the Atlas will go into
 this database.

 This database must be an Oracle database (preferrably a recent release – we use 11g). You will need to download and
 install the Atlas 2 schema from the EBI FTP site, ftp://aexpress:aexpress@ftp1.ebi.ac.uk, in the atlas2 directory
 (note, directory listings are disabled at the top level on the FTP site, so you will need to cd atlas2 before you see
 any files). The FTP site contains combined Atlas Schema and EBI Data releases, using the numbering scheme
 AtlasData-X.Yrel-W.tar.Z, where X.Y is the Data Release and W is the Schema release. Retrieve the latest release and
 unpack it. It will unpack to four files:

+------------
 install.sh - installation script
 Schema.tar.Z - archive with scripts for schema object creation
 Data.tar.Z - archive with all data and sqlldr control files, except for ExpressionValues
 Expression.tar.Z - expression values data archive
+------------

 The install.sh script accepts two parameters: INSTALL_STAGE and an Oracle connection string:

+------------
 install.sh Schema|ArrayDesign|Data|Expression user/password@tns_name
+------------

 and stops after completing the requested install stage:

     * Schema – create types, tables, views, packages

     * ArrayDesign – create Schema and load ArrayDesign, DesignElements, Organisms and Genes data

     * Data – create Schema, load ArrayDesign data and load all other data, except for ExpressionValues

     * Expression – do all of the above and load ExpressionValues data

     []

** SOLR Index and NetCDF Repository

 The Atlas uses extensive indices of the data in order to optimise data display in the web interface.  These indices are
 a combination of a SOLR index for experimental and gene metadata, and NetCDF files for expression data.  If you are not
 familiar with these technologies, you need not worry as they are installed and maintained by the Atlas software suite.
 
 However, you will need to make sure you have allocated sufficient diskspace for these indices to be stored.  On the
 filesystem where you intend to install the Atlas, you will need to directories available - one for the SOLR index and
 one for the NetCDF repository.  As a guide, the EBI installation of Atlas of around 1000 experiments and 200,000 genes
 consumes 6GB of diskspace for the SOLR index and about 8GB of data for NetCDFs.

** R

 Atlas utilises the R workbench to perform statistical analyses of loaded data.  It can be configured to perform local R
 analyses (i.e. on the same machine the atlas is running on) or remote analyses (on a different dedicated machine, or a
 compute cluster).  In the latter case it is possible to run R analyses through a biocep cloud.  You should pick one of
 these options before install, bearing in mind that running analyses locally may slow down the interface.

 An installation guide to R and/or biocep is outside the scope of this document. * TBC *

 -- Update with details of how to configure analyses].

** Tomcat

 To run Atlas you will need a Tomcat server installed and running.  Atlas should work on any tomcat version
 after 4.0.  We use 5.5.29, but it has been tested on later versions up to 6.0.  The Atlas web application will be
 deployed here.  Tomcat can be downloaded {{{http://tomcat.apache.org/}here}}.

 The Atlas uses JNDI to obtain connections to the atlas schema database from within tomcat.  For this reason, you will
 need to make Oracle database drivers available to Tomcat by installing them in the $CATALINA_HOME/lib or
 $CATALINA_HOME/common/lib directory, depending on your version of Tomcat.  See
 {{{Tomcat JNDI howto}http://tomcat.apache.org/tomcat-5.5-doc/jndi-resources-howto.html}}
 for more information on setting up JNDI resources.

 Make sure that you have the latest version of the Oracle Java 5 drivers installed in the tomcat library directory.  We
 recommend using ojdbc5.jar version 11.1.0.7.0 or later - you can download these drivers from
 {{{Oracle}http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/htdocs/jdbc_111060.html}}

** Maven

 To download, install and build a localised mirror of the Atlas, you will need to install the Maven software management
 tool.  Maven is available {{{http://maven.apache.org/}here}}.

 If you are familiar with Maven, and Atlas archetype is available that can be configured to your local environment and
 contains all the dependencies required to build the full software suite.

 If you have not used Maven before, don't worry, no special knowledge is required.  Using Maven to build your local
 Atlas simply means we can download and install all the modules required to create a customised version with a couple of
 simple commands.

* Installing Gene Expression Atlas

 Before we start, you need to know a couple of configuration options.

 * The URL of the database and schema you will use for the Atlas.

   * This should be an Oracle JDBC connection URL, of the form jdbc:oracle:thin:@<SERVER>:<PORT>:<SCHEMA_NAME>

   * Remember, this schema must be an Atlas2 database schema.

 * The username and password to connect to the Atlas 2 schema.

 * The absolute path to the directory where you wish to store the SOLR index.

   * This does not have to exist in advance, but you will need permissions to write to the location where you want to install it.

 * The absolute path to the directory where you wish to store the NetCDF repository.

   * Again, it doesn't need to exist already but you do need write permissions.

 []

 Now, switch to the directory where you wish to create the Atlas (note - this is NOT where you want Atlas to be
 installed) and run the following (Maven) command:

+----------
>: mvn archetype:generate -DarchetypeCatalog=http://gxa.github.com/maven/repo
+----------

 Pick the option "atlas-archetype" and follow on screen prompts.

 You will be asked for each of the configuration options highlighted above, plus a couple of other standard Maven options.
 Again, if you have used Maven before you will be familiar with these.

 If you have not used Maven before, lookout for:

 * group id

   * describes your software artifact "group".  Similar to a java package name, but at a higher level of abstraction.

   * often used to identify the company or team producing the software (e.g. com.mycompany).

   * at the EBI, Atlas modules use the group id "uk.ac.ebi.gxa".

 * artifact id

   * identifies this software artifact - a "module id".

   * should uniquely identify the module - avoid having modules with the same group and artifact id.

 * version

   * the version of this software artifact.

 []

 You are free to choose your own group id, artifact id and version.  These will simply identify different local
 installations of the Atlas.

 Once you have entered all the configuration options, Maven will start downloading all the software modules required to
 configure the Atlas and it will create your localised copy and required configuration files.  Once done, you should see
 a new directory under your current location with the artifact id you entered.

 Switch to this directory, and run

+----------
>: mvn package
+----------

 This command will download lots of dependencies, including the template web application for the Atlas, and it will
 assemble your local copy of the Atlas given your configuration options.  You should now see a .war file in the
 <<<target/>>> directory, with the artifact id specified.  This is your local Atlas installation.  Deploy this file into
 a running Tomcat and you're done!

** Further Configuration Options

 After generating your localised Atlas archetype, if you delve into the structure of the directory created you should
 see some files that encapsulate the configuration.  Assuming an artifact id "my-atlas-artifact" the directory structure
 should look like this:

+----------
my-atlas-artifact
|-- pom.xml
`-- src
    `-- main
        |-- resources
        |   |-- atlas.properties
        |   `-- biocep.properties
        `-- webapp
            `-- context.xml
+----------

 If you examine these files, you will see that atlas.properties contains some standard configuration governing how the
 Atlas functions - you will normally not need to change these.  Likewise, biocep.properties controls the R analysis
 infrastructure.

 The context.xml file is the most relevant one for controlling how your standalone Atlas works.  This is a standard
 webapp context file, and you will see five key components.  The first three represent Atlas database schemas.  These
 are, by default, all pointing to the same location, but you can change this to create two different main copies of the
 Atlas 2 schema, along with a development/test copy, if you require a finer granularity or you need the ability to
 switch between database instances (for example, if you want to maintain a mirror).

 The last two options point to the SOLR Index and NetCDF locations on the local filesystem.  Remember, these locations
 need to be accessible from the Tomcat where you intend to deploy the Atlas.

 If you change any of these options, you can simply rerun

+----------
>: mvn package
+----------

 to rebuild your standalone Atlas.
